/* Copyright (c) 2015 Kerio Technologies s.r.o.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE
 * LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR
 * ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * Except as contained in this notice, the name of a copyright holder shall not
 * be used in advertising or otherwise to promote the sale, use or other
 * dealings in this Software without prior written authorization of the
 * copyright holder.
 */
#include "stdafx.h"
#include <sstream>
#include <kerio/hashdb/Types.h>
#include "DataProducer.h"

namespace kerio {
namespace hashdb {
namespace benchmark {

	class NullDataProducer : public IDataProducer {
	public:
		NullDataProducer(const std::string& prefix)
			: prefix_(prefix)
		{

		}

		virtual void dataFor(std::string& target, size_type n)
		{
			target = prefix_;
		}

		virtual std::string name()	  
		{
			std::ostringstream os;

			if (! prefix_.empty()) {
				os << "prefix " << prefix_.size() << " bytes+";
			}

			os << "null";
			return os.str();
		}

	private:
		const std::string prefix_;
	};


	kerio::hashdb::benchmark::DataProducer newNullDataProducer(const std::string& prefix)
	{
		DataProducer newInstance(new NullDataProducer(prefix));
		return newInstance;
	}

	//-------------------------------------------------------------------------

	class Int32LittleEndianDataProducer : public IDataProducer {
	public:
		Int32LittleEndianDataProducer(const std::string& prefix)
			: prefix_(prefix)
		{

		}

		virtual void dataFor(std::string& target, size_type n)
		{
			static const size_type INT32_SIZE = sizeof(uint32_t);

			target.resize(prefix_.size() + INT32_SIZE);
			target += prefix_;

			for (size_type i = 0; i < INT32_SIZE; ++i) {
				target += static_cast<std::string::value_type>(n & 0xff);
				n >>= 8;
			}
		}
		
		virtual std::string name()	  { return (prefix_.empty())? "int32_le" : prefix_ + "+int32_le"; }

	private:
		const std::string prefix_;
	};

	DataProducer newInt32LittleEndianDataProducer(const std::string& prefix)
	{
		DataProducer newInstance(new Int32LittleEndianDataProducer(prefix));
		return newInstance;
	}

	//-------------------------------------------------------------------------

	class Int32BigEndianDataProducer : public IDataProducer {
	public:
		Int32BigEndianDataProducer(const std::string& prefix)
			: prefix_(prefix)
		{

		}

		virtual void dataFor(std::string& target, size_type n)
		{
			target.resize(prefix_.size() + sizeof(uint32_t));
			target += prefix_;

			target += static_cast<std::string::value_type>(n >> 24);
			target += static_cast<std::string::value_type>(n >> 16);
			target += static_cast<std::string::value_type>(n >> 8);
			target += static_cast<std::string::value_type>(n);
		}

		virtual std::string name()	  { return (prefix_.empty())? "int32_be" : prefix_ + "+int32_be"; }

	private:
		const std::string prefix_;
	};

	DataProducer newInt32BigEndianDataProducer(const std::string& prefix)
	{
		DataProducer newInstance(new Int32BigEndianDataProducer(prefix));
		return newInstance;
	}

	//-------------------------------------------------------------------------

	namespace {

		static const char* ones[] = {
			"", " one", " two", " three", " four", " five", " six", " seven", " eight", " nine", " ten", " eleven",
			" twelve", " thirteen", " fourteen", " fifteen", " sixteen", " seventeen", " eighteen", " nineteen"
		};

		static const char* tens[] = {
			"", "", " twenty", " thirty", " forty", " fifty", " sixty", " seventy", " eighty", " ninety"
		};

		void addOrder(std::string& target, size_type number, const char* orderName)
		{
			if (number > 0) {

				if (number >= 100) {
					target += ones[number / 100];
					target += " hundred";
					number %= 100;
				}

				if (number >= 20) {
					target += tens[number / 10];
					number %= 10;
				}

				if (number > 0) {
					target += ones[number];
				}

				target += orderName;
			}
		}

	};


	class StringDataProducer : public IDataProducer {
	public:
		StringDataProducer(const std::string& prefix)
			: prefix_(prefix)
		{

		}

		virtual void dataFor(std::string& target, size_type n)
		{
			target.clear();
			target += prefix_;

			static const size_type  BILLION = 1000000000;
			static const size_type  MILLION = 1000000;
			static const size_type THOUSAND = 1000;

			addOrder(target, (n / BILLION), " billion");
			addOrder(target, ((n % BILLION) / MILLION), " million");
			addOrder(target, ((n % MILLION) / THOUSAND), " thousand");
			addOrder(target, (n % THOUSAND), "");

			if (target.size() == 0) {
				target += "zero";
			}
			else {
				target.erase(0, 1);
			}
		}

		virtual std::string name() 	    { return (prefix_.empty())? "str" : prefix_ + "+str"; }

	private:
		const std::string prefix_;
	};

	DataProducer newStringDataProducer(const std::string& prefix)
	{
		DataProducer newInstance(new StringDataProducer(prefix));
		return newInstance;
	}

	//-------------------------------------------------------------------------

	static uint16_t propSize[] = {
		2413,  2953,  2144,  2621,  1792,   162,   666,  2505,  2505,   610,  2166,   461,   531,   240,  1393,  2509,   623,   761,  2334,   162,  // 20
		315,  2930,   405,  2089,  1029,   640,   212,   722,   162,   949,  1476,   493,  2605,   330,   485,   267,  1790,   493,  2490,  2687,	// 40
		2555,   673,   731,  1174,   291,  2671,  2726,  2204,  1261,   195,   323,  2555,   477,   195,   229,   670,  8152,   640,  1367,  2830,  // 60
		229,   302,   689,   240,  1299,    62,   568,  2319,  1994,   252,   255,  2440,  1708,   195,  2621,  2259,   302,   112,  1432,   471,	// 80
		162,   195,   447,  2259,  5933,   493,   609,  1358,   585,   162,   240,   195,   460,  2390,   302,  1706,   331,   640,  1341,   982,	// 100
		2671,  2089,  3866,   760,  2024,   526,  1644,  3001,  2144,   493,   688,   267,  6077,   926,  2768,  2786,    62,  1422,   331,   656,  // 120
		2555,   314,  2605,   601,   477,  2659,  1645,  6180,   640,  2347,   240,   257,   526,  2621,  2158,  3697,  2259,   563,  2347,   195,  // 140
		314,   229,   314,  1521,   428,  2385,  1286,  1163,  1549,  2144,  2259,   560,   267,  2347,   493,  2694,   912,   555,   660,   553,	// 160
		1391,   314,   560,   229,   560,   477,  2505,   329,  2144,   526,  2744,  2237,  2432,   229,  1350,  2605,   267,   813,   252,  1269,  // 180
		719,   332,   633,   162,  1473,   490,   416,   609,   195,  1286,  2555,  2593,   448,   302,  2557,   314,  1145,    62,   552,  2387,	// 200
		2537,   195,   493,   229,   195,   302,  1469,  2555,     0,   730,  2089,   240,   331,  1411,  2144,  1038,  3855,   877,  2505,   162,  // 220
		2144,  2259,  2448,  1644,   302,  2505,   195,   321,   302,  2144,   355,  2555,  2555,    62,   229,  1174,    62,   195,   425,  2557,  // 240
		466,   195,   240,  2209,  1228,   623,  1261,  2551,   302,   234,   229,   384,  3801,   722,   722,  2690,   640,   195,   195,  2418,	// 260
		278,   331,   350,  2621,   195,  2238,  2347,   688,   640,   350,  2517,  3095,   195,   405,  2259,   195,  1882,  1062,   477,   428,	// 280
		162,  2605,   493,  1707,  1261,   302,   391,  2206,   501,   609,   609,  2347,  2583,   162,  2259,  1365,  1648,   267,   252,   357,	// 300
		2727,   688,  2114,   302,   471,   391,  2259,  2618,  2729,  2567,   302,  2144,   722,   240,  4877,   493,   638,  3708,   722,   903,  // 320
		480,   493,   162,  2621,  1174,   463,   371,   493,   267,  2390,   654,  1194,  1062,   162,   609,  1989,  2654,   872,  4486,  2204,	// 340
		318,   240,    62,  1115,  1886,   195,  5773,  2505,  4862,   240,   116,   471,   229,   428,  5305,    62,   493,  2571,  1285,  2440,	// 360
		688,   240,   302,   302,   560,   462,  2659,   632,   493,  2555,  3666,   195,   513,   240,  2259,  2333,  2070,  2621,   560,  3007,	// 380
		240,   907,  2621,   314,  1556,  3040,  2029,  6087,  2555,   891,  2259,   323,   563,  2360,  1015,  2605,  2144,   162,   302,   229,	// 400
		331,  2496,  2404,   229,   609,  2259,   567,  1252,   195,  2798,  2144,   116,   515,  2744,  2144,   195,  2319,  2413,   384,   195,	// 420
		688,  2643,   774,   302,  2204,   314,   369,  3650,  2144,  2863,   195,  2505,   360,  1572,   493,  2505,   468,  1500,  1065,   195,	// 440
		384,  1559,  2555,  2995,  2621,    62,   629,  2093,  1536,   267,  2555,   267,  3745,   240,   162,   731,   195,  2089,   477,   793,	// 460
		314,  2002,  2555,   453,  2605,  2089,  7379,  5798,   477,   656,   709,   162,   538,  1467,  2448,  2621,   471,   493,  2347,   329,	// 480
		729,  1141,  2555,   314,   229,  2922,    62,  2694,   195,  2347,  2333,  2144,  2259,   901,   477,   560,  2889,   195,   722,   267,	// 500
		3116,   314,   672,   162,   688,  2507,  2869,   314,   229,  2201,  1725,  4147,  2099,   738,   195,   471,   428,  2767,  2070,  2497,  // 520
		3855,  2507,   457,   195,  2144,   478,   116,   462,   266,   280,   314,  2654,  2557,  3008,   195,  1345,  2605,  2144,  2621,   314,  // 540
		1132,   538,   739,   330,  2144,   336,   240,  1065,   329,   656,   428,   424,   266,  2555,  2259,   302,  2555,  2347,  2413,  1707,  // 560
		2259,   665,  2812,   229,  1807,  1268,   162,  2555,   357,  1040,  2259,  2571,  2557,   267,  2571,  1643,   508,   314,   480,   563,  // 580
		302,  1486,  2122,   252,   609,   926,  1522,  2706,   162,   240,  1603,  2505,   255,   731,  2347,   563,  2413,  1268,  5839,   195,	// 600
		2029,   760,   547,   302,  2632,   672,   357,  2144,  1177,  2436,  1476,   629,  2166,   195,   477,   666,  2726,  2533,   822,  2089,  // 620
		640,  2144,  3023,   267,   310,   629,    62,   326,  2275,  2502,   195,   331,  2089,   351,  2571,   302,   278,  2621,  2144,  1261,	// 640
		195,  2511,  2483,  2505,  2694,    62,  2144,   240,   544,   493,  2653,  2432,   195,    62,  2571,  1065,   859,   343,  1286,  3401,	// 660
		4753,   501,  2794,   493,  2605,  2505,   314,   342,  1555,     0,  2744,   640,  1293,   493,  1015,  1327,  2204,   314,   493,  2204,  // 680
		240,  2303,   357,   287,   391,   289,  2577,  2144,  2555,   195,   331,   314,  2555,  2144,   478,  2799,   629,  2259,   195,  3811,	// 700
		5472,  1136,  2144,   314,  2347,   195,   229,  2259,   872,   477,   391,  2557,  1285,   391,   195,  2413,   195,  2505,   463,  2259,  // 720
		162,  2551,  1884,   329,  2334,  3121,  2144,   405,   477,   731,  1626,   195,  2144,  2555,   642,  1547,  1286,   490,  1117,   267,	// 740
		560,   329,   572,   560,   252,  1222,    62,   267,  2801,  2331,     0,  2505,  2711,  2347,  2289,  2929,   709,  3121,   493,    62,	// 760
		2448,  4364,  3116,   563,   480,  3111,  1178,  1989,  2267,  1331,  2555,   229,  2094,   314,  2347,   322,  2671,   391,   322,   571,  // 780
		1117,    62,  2672,   334,   269,    62,   335,  2621,   418,   240,   780,   314,  2671,   331,  1485,    62,  2144,  1169,   290,   309,  // 800
		2413,   162,   404,   240,  2259,  2674,   302,  2417,   858,   302,  1174,  2347,  1563,   302,  2505,  2209,  2077,  2144,     0,   341,  // 820
		2259,   717,   240,   640,   567,   357,   471,   195,   561,  2555,   428,  2440,  2259,  2144,   302,  1745,  2347,  1594,   512,   526,  // 840
		600,  2505,  2089,   391,  5160,   737,  2555,    62,  2259,   405,   331,   314,   229,  2760,   640,  2555,   640,   948,   696,   633,	// 860
		1642,   493,   195,   660,   195,   333,   240,  2505,  2259,  2551,  2109,  2783,  2259,  2347,   945,   350,  2555,   495,   854,   331,  // 880
		872,  2394,  1331,  3670,  2605,  2209,   572,  2154,   323,   195,  3121,   563,   302,  1367,  5123,   503,   688,   240,   609,   332,	// 900
		302,  2555,  1037,   309,   240,  2555,  2347,  2662,   492,   477,  2430,   116,   756,   240,  2144,  1502,  2766,  2399,     0,  2555,	// 920
		1132,   252,   569,   261,   310,    62,  1647,   493,   563,  2274,   314,  2539,  2555,  6077,  2555,  2413,  2555,   162,  2594,  2762,  // 940
		2144,  6529,   240,   302,   403,   267,  2144,   493,   357,  2319,  2555,  1359,  2259,  1706,  2259,  2621,   513,   808,  4908,  2094,  // 960
		302,   195,   560,   573,   560,   391,   870,  1260,   302,   162,  2436,   453,   302,     0,   229,    62,   252,  2642,   112,  1371,	// 980
		2164,  2995,   302,   252,  2605,  2661,  3675,   340,   632,   195,   688,  1603,   393,  1473,  2555,  2555,    62,  1181,  2571,  2797,  // 1000
		2406,   240,   477,  2557,  1644,  1369,  2144,  2413,   195,     0,  1644,   240,   391,   306,  2039,  2569,   302,   493,  1466,  2479,  // 1020
		1998,   240,   731,    62,  2259,  1277,  2347,  2768,   696,   314,   240,  2703,  2413,  2555,  2275,   162,  2691,   352,  2397,  2144,  // 1040
		2525,  2605,   613,   339,  2154,    62,   540,  2117,  2259,   329,  1261,   314,   725,  2621,  4536,   785,  2347,  3697,  1572,  2144,  // 1060
		514,   240,   229,    62,   240,  2492,   409,   405,  1410,   329,  5716,   195,   240,   240,   299,   444,  2144,  2939,   240,  1102,	// 1080
		3650,   391,  1054,  2505,  6469,   742,  2605,  2347,  1373,   195,   688,  2347,   252,  2555,    62,   267,  2347,  2144,  2555,   515,  // 1100
		195,  2144,  1901,   573,  2871,   266,   350,   903,   314,   731,   426,  2400,   494,  2810,   195,   493,   609,   240,  2571,  2448,	// 1120
		1256,    62,  2378,  1252,  1252,  2190,  2555,   323,   302,   351,   665,   314,  1385,   983,   240,   229,  1652,   331,    62,   240,  // 1140
		2744,  2259,  2682,    62,  2663,   640,   252,   252,  2555,     0,  2555,   669,    62,  2505,  2259,   229,  2605,   688,  2555,   526,  // 1160
		2144,  4536,   314,    62,  2164,  2570,  2701,   666,   351,  2275,   331,  2470,    62,   688,  2259,   252,   333,   640,   240,  2555,  // 1180
		666,    62,   195,   384,   583,   552,   355,    62,   578,  1342,  2671,   195,   195,   493,   546,  1261,   722,  2557,  2551,  1535,	// 1200
		6087,   309,  2228,   445,  5208,  2605,  1261,   240,  2505,  2255,  2259,  6097,   240,   302,  2605,  2144,   162,   195,   302,  2413,  // 1220
		573,   644,   926,   302,  2347,   688,  2259,  2333,  2144,   992,  1139,   666,  2551,   609,   229,   266,   334,  2555,  2144,   162,	// 1240
		162,  2144,  2642,   945,   577,  1455,   195,   640,  1327,  1535,  2535,  1646,  5695,  2555,  1987,   309,  3011,  1771,   314,  2366,	// 1260
		2503,  1736,   629,   405,   331,  2144,  1252,   502,   195,  2574,   391,  2900,   672,   240,  2144,   252,   240,   302,   116,   640,  // 1280
		2259,   421,  1387,   493,  1285,   513,  2555,   240,  1252,   572,  2347,   195,  2605,  2505,   314,  2259,   907,  3629,   406,   469,  // 1300
		195,  6469,   462,   433,  6097,  2574,   302,   688,   493,  3778,  2347,  2144,   351,   716,  2610,   240,  2204,   632,   977,   267,	// 1320
		314,  3601,  2389,  2440,  1198,   357,  2470,  1629,  1074,   609,  2570,   688,   477,   560,  2333,  2555,  2555,   267,  1359,   195,	// 1340
		1476,   112,   162,   240,   229,   428,  2505,  1648,  2319,   195,   116,  2621,   428,  2144,  2238,   619,  2333,   793,  2347,   266,  // 1360
		405,  2130,  2505,   493,  3116,   302,  2347,  2366,  2555,   302,   320,   162,   527,  2537,    62,   571,   252,  2605,   229,  6832,	// 1380
		1117,   557,   870,  1252,   493,   314,   252,  2621,  1898,   666,   731,   229,  3671,   596,   493,  1252,   240,  2555,  2371,   195,  // 1400
		2411,   477,   240,   331,  2256,  1066,  1994,   657,   477,   477,  2555,   302,    62,   267,  1198,   195,   252,   945,   240,  2758,  // 1420
		2605,   314,  1602,   314,   644,   195,  1436,  2153,   240,  2570,   743,   331,   240,   512,   330,   252, 27341,  2555,  1074,   357,  // 1440
		2756,   302,   252,    62,   448,  2605,  1577,  2259,   267,  2555,   563,  2000,  6658,  2259,   331,  2005,   240,  2144,  1049,  2259,  // 1460
		942,   391,   240,  2677,   195,   195,  2283,   485,   351,   708,  2826,  1480,  2671,  2238,   391,   477,   709,   655,  2571,  2813,	// 1480
		640,   460,   302,   405,   872,   722,  1103,  2423,  2671,   560,  2440,  2621,  2463,   195,  1898,   513,   314,   609,  2555,  1533,	// 1500
		2766,  1361,  3723,   329,  1429,  2555,   780,   477,  5188,  2144,   512,   571,  2677,   391,   267,   302,   195,   587,   240,   484,  // 1520
		252,  2144,   640,   731,   302,   323,   351,   382,   195,  2347,    62,   302,  2390,  2372,   252,  2605,   571,   195,  2505,  2694,	// 1540
		162,  1042,   722,    62,   302,  1252,  2505,  3001,   949,  1643,    62,   240,  2347,  2869,  2988,   567,   493,   195,    62,  1736,	// 1560
		5103,   240,   560,  1707,   309,  2555,   534,  1417,   493,  2605,  1476,   493,  2432,   495,   162,   314,   625,  1535,     0,   314,  // 1580
		2413,  2505,   573,  2595,   949,  2555,   625,  2204,   874,    62,  1021,  2144,   195,   162,  2333,  2555,   240,   538,  2144,  2505,  // 1600
		2812,   162,  1594,   560,  2526,  1015,   640,   513,    62,   304,  1608,   688,  1705,  5120,  2555,   391,   252,  2621,   477,   477,  // 1620
		797,  2347,  1884,  1338,  2144,   688,  2452,  1002,   477,   314,  2144,   195,   481,   195,   195,   112,  2700,  1529,  3670,  2075,	// 1640
		280,  2605,  2555,    62,   655,   240,   267,  1518,   731,   705,  6658,   709,   673,  2571,  2557,  2259,   267,  2505,  1173,   708,	// 1660
		504,   349,  2254,  2259,   583,  1697,  2204,   329,   302,  1882,  1306,  2448,  1536,   563,   872,     0,  2161,   195,   302,  1065,	// 1680
		507,   302,  2440,  1228,  1074,   658,  2555,    62,  1381,   240,   447,  2505,  2671,   162,    62,  2463,  2144,   195,  1252,   162,	// 1700
		3481,   302,   314,   428,  2276,     0,  2144,  4493,  2094,     0,  2591,  4490,   672,  2542,  2229,  2626,   629,  1411,   391,   560,  // 1720
		5422,   195,   240,  1915,   328,   326,   573,   640,  1644,  2078,   601,  2533,  2555,   195,  3401,   302,   563,   309,  2256,  2259,  // 1740
		341,   195,   526,  2557,  2144,   162,   302,  1177,   515,    62,  2204,  1252,   623,  1952,   514,  2108,   640,   640,   162,  2144,	// 1760
		1174,  2505,  1026,  2144,  2621,  2605,  1261,  2144,   609,  1285,   640,  2555,   478,   195,   266,  3855,  1057,   302,   426,  2319,  // 1780
		5362,   240,   195,  2259,   267,   314,   688,  2557,  2949,   732,  1228,  2593,   331,  1644,  2319,   318,   240,  3116,   477,  2641,  // 1800
		630,  1037,   391,   331,   426,   255,  2555,  2574,   314,   329,   240,   477,  1457,  2499,   493,  1007,   581,   493,    62,  2259,	// 1820
		2555,   195,   760,  1884,  2144,   344,   302,   302,   378,  2586,   781,  1979,  1117,   471,   477,  2347,   587,   773,  1261,   252,  // 1840
		240,   391,    62,  1261,  2194,   609,   195,  2555,   581,  1261,  2555,    62,   195,   328,   926,  2644,    62,  2885,  1590,  2144,	// 1860
		252,  2347,   252,   195,   409,  2988,  2555,  1798,   563,   352,  2671,    62,  1861,  2089,  2621,  2671,  2555,   907,   640,  2288,	// 1880
		4868,  2463,  1373,  2347,  2259,   305,  2523,   195,   331,  1408,   240,  2144,   314,  2555,  1715,   477,  1476,   513,  2555,  3663,  // 1900
		2144,  2144,   405,  1111,  2671,  2571,   240,  1700,  1544,   609,   314,  2621,  2020,  2259,  2637,  2352,  4762,  2521,   731,   162,  // 1920
		2144,   240,   240,   656,   493,   640,   351,   330,  2259,   493,   640,   318,  2347,   195,   477,  1646,  1065,  4874,  2144,  2259,  // 1940
		2144,  2555,  2869,  2204,   357,  3283,  1389,   640,  3629,   445,   331,  2744,  1646,  2555,  2204,   195,  2127,   716,   560,   339,  // 1960
		2004,  2505,   447,  3663,   331,   252,  1261,   896,  1522,  2412,  2606,   477,   252,  1117,  1112,  1340,  2034,   252,  2144,   471,  // 1980
		738,   640,  1286,     0,  1286,  2344,   512,   629,   477,  2032,  2617,   600,   722,   461,  2259,  2144,  2437,  1382,   336,   675,	// 2000
	};

	class PropsDataProducer : public IDataProducer {
	public:
		PropsDataProducer(const std::string& prefix)
			: prefixSize_(prefix.size())
		{

		}

		virtual void dataFor(std::string& target, size_type n)
		{
			size_type genSize = 36;
			if ((n & 1) == 0) {
				static const size_type arraySize = sizeof(propSize) / sizeof(propSize[0]);
				genSize = propSize[(n / 2) % arraySize];
			}

			target.resize(prefixSize_ + genSize, '0');
		}

		virtual std::string name() 	    
		{ 
			std::ostringstream os;

			if (prefixSize_ != 0) {
				os << "prefix " << prefixSize_ << " bytes+";
			}

			os << "props";
			return os.str();
		}

	private:
		const size_t prefixSize_;
	};

	kerio::hashdb::benchmark::DataProducer newPropsDataProducer(const std::string& prefix)
	{
		DataProducer newInstance(new PropsDataProducer(prefix));
		return newInstance;
	}

}; // namespace benchmark
}; // namespace hashdb
}; // namespace kerio
